Fix 403 on /auth/status, Dev Cookies, Auth Guard, and Onboarding Redirect

Context

Frontend (Vite) hits backend via proxy at /api/* during dev.

In dev, the app runs on a Replit preview domain (not api.livinglytics.com).

Current issue: GET /api/v1/auth/status returns 403 after login because the session cookie isn’t being sent/recognized in dev.

Goal: Make dev sessions work reliably and route first-time users to /onboarding after Google OAuth.

Tasks
A) Backend (FastAPI) — DEV cookie settings + tolerant status

Open the backend auth utils where the session cookie is set (e.g., auth/router.py or a helper).

Modify the cookie set logic to differentiate DEV vs PROD:

DEV (when ENV != 'prod'):

Do not set a cookie domain (let browser default to current host).

secure=False (dev), httponly=True, samesite="lax", path="/".

PROD:

domain="api.livinglytics.com", secure=True, httponly=True, samesite="none", path="/".

Make /v1/auth/status tolerant: if there’s no session, return 200 with { authenticated:false } instead of 403. Keep 403/401 only for clearly forbidden states. This reduces console spam and makes the UX predictable.

Pseudo-example (adapt to your code):

# when creating response after successful login
from fastapi import Response
import os

ENV = os.getenv("ENV", "dev")

def set_session_cookie(response: Response, token: str):
    if ENV == "prod":
        response.set_cookie(
            "session", token,
            domain="api.livinglytics.com",
            secure=True, httponly=True, samesite="none", path="/"
        )
    else:
        response.set_cookie(
            "session", token,
            secure=False, httponly=True, samesite="lax", path="/"
        )


For /v1/auth/status:

# if not logged in:
return {"authenticated": False, "providers": {}}
# (HTTP 200)

B) Frontend — make fetchAuthStatus() resilient to 401/403 and quiet

In src/lib/auth.ts (or wherever fetchAuthStatus lives), treat 401/403 as unauthenticated and don’t console.error spam.

export async function fetchAuthStatus(): Promise<AuthStatus> {
  try {
    const res = await fetch('/api/v1/auth/status', { credentials: 'include' });
    if (!res.ok) return { authenticated: false, providers: {} };
    return res.json();
  } catch {
    return { authenticated: false, providers: {} };
  }
}


Ensure every auth-related fetch uses credentials: 'include'.

C) OAuth Callback → Onboarding

In src/pages/ConnectCallback.(tsx|jsx) (or your OAuth callback handler), after reading query params:

If localStorage.getItem('ll_onboarding_done') !== '1', redirect to /onboarding immediately.

Otherwise continue existing logic (→ /connect).

const onboarded = localStorage.getItem('ll_onboarding_done') === '1';
if (!onboarded) {
  window.location.replace('/onboarding');
  return null;
}

D) AuthGuard — avoid loops and handle “not authed” calmly

In src/components/layout/AuthGuard.tsx, keep current logic but do nothing (no redirects) if authenticated is false — let public pages load without spamming redirects/polls.

Only apply the onboarding/connection redirects when authenticated === true.

Snippet idea:

if (!isAuthed) { setReady(true); return; } // public pages allowed
// authed routing…

E) Public nav — remove “Connections” for logged-out users (marketing header)

In the marketing nav component, remove the Connections item entirely or wrap it with an isAuthed check that never shows for logged-out users.

{false && <a href="/connect">Connections</a>}


(or a proper isAuthed && <Link …> if you already fetch status once at layout)

F) Dev/prod toggle

In backend, set ENV via environment variable in Replit:

Dev repl: ENV=dev

Production: ENV=prod

Ensure Vite dev continues to use VITE_API_BASE=/api and production .env.production uses https://api.livinglytics.com.

G) Quick tests (have Replit run)

Restart backend after cookie change.

From the frontend repl:

Hard refresh, open devtools → Application → Cookies; log in with Google.

Confirm a session cookie exists for the preview host (no domain=api.livinglytics.com in dev).

Verify /api/v1/auth/status returns 200 with { authenticated:true }.

After Google OAuth → should land on /onboarding (first time).

Submit onboarding → redirects to /connect.

Connect at least one source → now /dashboard accessible.

Acceptance Criteria

In dev, Google login sets a session cookie usable on the Replit preview host.

/api/v1/auth/status returns 200 consistently; no more repeating 403s.

First login after OAuth goes to /onboarding.

Public marketing pages never show a “Connections” link for logged-out users.

After onboarding & one connection, /dashboard is accessible; otherwise guard routes to /connect.